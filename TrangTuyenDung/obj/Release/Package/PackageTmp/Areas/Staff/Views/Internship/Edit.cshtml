@model TrangTuyenDung.Models.InternshipCreate
@{
    ViewBag.Title = "Sửa Giấy giới thiệu";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
    ViewBag.itemActive = "internReferral";
}

@section Styles {
    <!-- select2 with bootstrap4 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.12/css/select2.min.css" integrity="sha256-FdatTf20PQr/rWg+cAKfl6j4/IY3oohFAJ7gVC3M34E=" crossorigin="anonymous" />
    <link href="~/Content/Vendor/select2/select2-bootstrap4.min.css" rel="stylesheet" />

    <!-- bootstrap datepicker3 -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker3.min.css" integrity="sha256-FAOaXTpl90/K8cXmSdsskbQN3nKYulhCpPbcFzGTWKI=" crossorigin="anonymous" />

    <!-- autocomplete -->
    <link href="~/Content/Vendor/autocomplete/autocomplete.css" rel="stylesheet" />
}

<!-- page heading -->
<div class="h3 mb-3 text-gray-800">Sửa thông tin Giấy giới thiệu</div>

<!-- store list jobpostions -->
<input id="companies" hidden data-companies="@ViewBag.Companies" value="" />

<!-- list all faculty/major -->
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Giấy giới thiệu</h6>
    </div>

    <div class="card-body">
        <div class="text-danger">
            *Điền đầy đủ các trường thông tin.
        </div>

        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "myForm" })) {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="h4 font-weight-medium text-dark">I. Thông tin sinh viên</div>

            <section class="mb-3">
                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Student_Name, htmlAttributes: new { @class = "font-weight-medium" })
                        @Html.EditorFor(model => model.Student_Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Họ và tên" } })
                        @Html.ValidationMessageFor(model => model.Student_Name, "", new { @class = "text-danger d-block" })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.MSSV, htmlAttributes: new { @class = "font-weight-medium" })
                        @Html.EditorFor(model => model.MSSV, new { htmlAttributes = new { @class = "form-control", @placeholder = "Mã số sinh viên" } })
                        @Html.ValidationMessageFor(model => model.MSSV, "", new { @class = "text-danger d-block" })
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Level_Id, htmlAttributes: new { @class = "font-weight-medium" })
                        @Html.DropDownList("Level_Id", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Level_Id, "", new { @class = "text-danger d-block" })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Major_Id, "Chuyên ngành", htmlAttributes: new { @class = "font-weight-medium" })
                        @Html.DropDownList("Major_Id", null, "", htmlAttributes: new { @class = "custom-select" })
                        @Html.ValidationMessageFor(model => model.Major_Id, "", new { @class = "text-danger d-block" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "font-weight-medium" })
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger d-block" })
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.CellPhone, htmlAttributes: new { @class = "font-weight-medium" })
                        @Html.EditorFor(model => model.CellPhone, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CellPhone, "", new { @class = "text-danger d-block" })
                    </div>
                </div>
            </section>

            <div class="h4 font-weight-medium text-dark">II. Thông tin thực tập</div>
            <section>
                <div class="form-group">
                    @Html.LabelFor(model => model.Company_Name, htmlAttributes: new { @class = "font-weight-medium" })
                    @Html.EditorFor(model => model.Company_Name, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Company_Name, "", new { @class = "text-danger d-block" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Type_Inter, htmlAttributes: new { @class = "font-weight-medium" })
                    @Html.DropDownList("Type_Inter", ViewBag.Type_Inter as List<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Type_Inter, "", new { @class = "text-danger d-block" })
                </div>
                <div id="otherInternType" class="form-group d-none">
                    @Html.EditorFor(model => model.internTypeOther, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nhập hình thức thực tập" } })
                    @Html.ValidationMessageFor(model => model.internTypeOther, "", new { @class = "text-danger d-block" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Semester_Inter, htmlAttributes: new { @class = "font-weight-medium" })
                    @Html.DropDownList("Semester_Inter", ViewBag.Semester_Inter as List<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Semester_Inter, "", new { @class = "text-danger d-block" })
                </div>

                <div class="form-group mb-1">
                    <label class="font-weight-medium">Thời gian thực tập</label>
                    <div class="input-daterange input-group">
                        @Html.EditorFor(model => model.Inter_from, new { htmlAttributes = new { @class = "form-control text-left", @placeholder = "Ngày bắt đầu", @autocomplete = "off" } })
                        <span class="input-group-text rounded-0 border-left-0 border-right-0">đến</span>
                        @Html.EditorFor(model => model.Inter_to, new { htmlAttributes = new { @class = "form-control text-left", @placeholder = "Ngày kết thúc", @autocomplete = "off" } })
                    </div>
                </div>
                <div class="form-text d-block mb-2">
                    <small class="d-block">Khoảng thời thực tập (mm/dd/yyyy)</small>
                    @Html.ValidationMessageFor(model => model.Inter_from, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.Inter_to, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.School_year, htmlAttributes: new { @class = "font-weight-medium" })
                    @Html.DropDownList("School_year", ViewBag.School_year as List<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.School_year, "", new { @class = "text-danger d-block" })
                </div>
            </section>

            <div class="d-flex justify-content-end">
                <a href="@Url.Action("List", "Internship", new { area = "Staff" })" class="btn btn-sm btn-outline-secondary mr-2">Hủy</a>
                <input type="submit" value="Lưu" class="btn btn-primary btn-sm px-3" />
            </div>
        }
    </div>
</div>


@section Scripts{
    <!-- bootstrap datepicker3 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js" integrity="sha256-bqVeqGdJ7h/lYPq6xrPv/YGzMEb6dNxlfiTUHSgRCp8=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/locales/bootstrap-datepicker.vi.min.js" integrity="sha256-TnMvef6AxT9fg6mNrTsZCgPDkU4g5EyB+tu66oLAI4U=" crossorigin="anonymous"></script>

    <!-- select2 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.12/js/select2.min.js" integrity="sha256-wfVTTtJ2oeqlexBsfa3MmUoB77wDNRPqT1Q1WA2MMn4=" crossorigin="anonymous"></script>

    <!-- devbridge autocomplete -->
    <script src="~/Scripts/Vendor/devbridge-autocomplete/jquery.autocomplete.min.js"></script>

    <!-- common func -->
    <script src="~/Scripts/common.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            autocompleteCompanyName();
            showInpInternOtherType();
            initDatepickup($('.input-daterange'));
            searchSelect2($("#Major_Id"), "--Chọn Chuyên ngành--");

            $("#myForm").submit(function () {
                $("#CellPhone").val((_i, v) => v.replace(/\./g,''));
            });

            $("#CellPhone").keyup(function () {
                this.value = formatPhoneNumber(this.value);
            });

            $('#Type_Inter').on('change', function () {
                const inpInternType = $("#otherInternType");
                if (this.value == 2) {
                    inpInternType.removeClass("d-none");
                    inpInternType.val("");
                }
                else {
                    inpInternType.addClass("d-none");
                    inpInternType.val("");
                }
            });

            function showInpInternOtherType() {
                const $otherInternType = $("#otherInternType");
                if ($("#Type_Inter").val()) {
                    $otherInternType.removeClass("d-none");
                }
            }

            function autocompleteCompanyName() {
                const listCompany = getAllCompanyName();
                $("#Company_Name").autocomplete({
                    lookup: listCompany,
                    showNoSuggestionNotice: true,
                    noSuggestionNotice: "Bạn hãy nhập tên Công Ty vào đây nếu chưa có, lưu ý chữ hoa & chữ thường"
                });
            }

            function getAllCompanyName() {
                let $companies = $('#companies').data('companies').trim();
                $companies = $companies.slice("|", -1);
                $companies = $companies.split("|");
                $companies.sort((a, b) => a.localeCompare(b, "vi", { sensitivity: 'base' }));

                return $companies;
            }
        });
    </script>
}

