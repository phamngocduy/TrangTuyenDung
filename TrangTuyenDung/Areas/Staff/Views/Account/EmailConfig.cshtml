@model TrangTuyenDung.Models.Email_Configs

@{
    ViewBag.Title = "Thiết lập tài khoản Mail";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
    ViewBag.itemActive = "setting";
}

<!-- page heading -->
<div class="h3 mb-3 text-gray-800">Thiết lập nội dung Mail</div>

@if (!ViewData.ModelState.IsValid) {
    var errors = @Html.Raw(Json.Encode(string.Join(Environment.NewLine,
                   ViewData.ModelState
                       .Where(x => x.Value.Errors.Count > 0)
                       .SelectMany(x => x.Value.Errors)
                       .Select(error => error.ErrorMessage))));
    <p>errors</p>
}

<!-- main content -->
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <div class="dropdown d-inline-block mb-1 mb-md-0">
            <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" id="dropdownEmailType" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @if (Model.Email_Type == "APPROVE") {
                    <span>Thông báo kích hoạt tài khoản thành công</span>
                }
                else if (Model.Email_Type == "REJECT") {
                    <span>Thông báo từ chối phê duyệt tài khoản</span>
                }
                else if (Model.Email_Type == "REJECT_RECRUITMENT") {
                    <span>Thông báo tin tuyển dụng bị từ chối</span>
                }
                else {
                    <span>Chọn thiết lập</span>
                }
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownEmailType">
                <a class="dropdown-item @(Model.Email_Type == "APPROVE" ? "pl-2" : null)" href="@Url.Action("EmailConfig", "Account", new { area = "Staff", emailType = "APPROVE" })">
                    @if (Model.Email_Type == "APPROVE") {
                        <i class='fas fa-check'></i>
                    }
                    Thông báo kích hoạt tài khoản thành công
                </a>
                <a class="dropdown-item @(Model.Email_Type == "REJECT" ? "pl-2" : null)" href="@Url.Action("EmailConfig", "Account", new { area = "Staff", emailType = "REJECT" })">
                    @if (Model.Email_Type == "REJECT") {
                        <i class='fas fa-check'></i>
                    }
                    Thông báo từ chối phê duyệt tài khoản
                </a>
                <a class="dropdown-item @(Model.Email_Type == "REJECT_RECRUITMENT" ? "pl-2" : null)" href="@Url.Action("EmailConfig", "Account", new { area = "Staff", emailType = "REJECT_RECRUITMENT" })">
                    @if (Model.Email_Type == "REJECT_RECRUITMENT") {
                        <i class='fas fa-check'></i>
                    }
                    Thông báo tin tuyển dụng bị từ chối
                </a>
            </div>
        </div>

        <a class="btn btn-primary btn-sm" href="@Url.Action("EmailConfig", "Account", new { area = "Staff", emailType = "ACCOUNT" })" role="button">
            Thiết lập tài khoản Mail
        </a>
    </div>

    <div class="card-body">
        <!-- email congrate Company register success -->
        @if (Model.Email_Type == "APPROVE") {
            using (Html.BeginForm(FormMethod.Post)) {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)

                <div class="form-group row">
                    <label class="col-sm-2 col-lg-1 col-form-label" for="EmailSubject">Tiêu đề</label>

                    <div class="col-md-8">
                        @Html.EditorFor(model => model.EmailSubject, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EmailSubject, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-lg-1 col-form-label" for="EmailSubject">Nội dung</label>

                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Content_Header, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Content_Header, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-lg-1 col-form-label" for="Signature">Chữ ký</label>

                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Signature, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Signature, "", new { @class = "text-danger" })
                    </div>
                </div>

                <button class="btn btn-primary btn-sm" type="submit">Cập nhật</button>
            }
        }

        <!-- reject company -->
        @if (Model.Email_Type == "REJECT") {
            using (Html.BeginForm(FormMethod.Post)) {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger small" })
                @Html.HiddenFor(model => model.Id)

                <div class="form-group row">
                    <label class="col-sm-2 col-lg-1 col-form-label" for="EmailSubject">Tiêu đề</label>

                    <div class="col-md-8">
                        @Html.EditorFor(model => model.EmailSubject, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EmailSubject, "", new { @class = "text-danger small" })
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-lg-1 col-form-label" for="Content_Header">Nội dung</label>

                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Content_Header, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Content_Header, "", new { @class = "text-danger small" })
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-lg-1 col-form-label" for="Signature">Chữ ký</label>

                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Signature, new { htmlAttributes = new { @class = "form-control small" } })
                        @Html.ValidationMessageFor(model => model.Signature, "", new { @class = "text-danger small" })
                    </div>
                </div>

                <button class="btn btn-primary btn-sm" type="submit">Cập nhật</button>
            }
        }

        <!-- reject recruitment post -->
        @if (Model.Email_Type == "REJECT_RECRUITMENT") {
            using (Html.BeginForm(FormMethod.Post)) {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger small" })
                @Html.HiddenFor(model => model.Id)

                <div class="form-group row">
                    <label class="col-sm-2 col-lg-1 col-form-label" for="EmailSubject">Tiêu đề</label>

                    <div class="col-md-8">
                        @Html.EditorFor(model => model.EmailSubject, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EmailSubject, "", new { @class = "text-danger small" })
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-lg-1 col-form-label" for="Content_Header">Nội dung</label>

                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Content_Header, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Content_Header, "", new { @class = "text-danger small" })
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-2 col-lg-1 col-form-label" for="Signature">Chữ ký</label>

                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Signature, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Signature, "", new { @class = "text-danger small" })
                    </div>
                </div>

                <button class="btn btn-primary btn-sm" type="submit">Cập nhật</button>
            }
        }

        <!-- config account mail -->
        @if (Model.Email_Type == "ACCOUNT") {
            using (Html.BeginForm(FormMethod.Post)) {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger small" })
                @Html.HiddenFor(model => model.Id)

                <div class="form-group row">
                    <label class="col-sm-3 col-lg-2 col-form-label" for="Email">Email gửi thư</label>
                        
                    <div class="col-md-7">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger small" })
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-3 col-lg-2 col-form-label" for="password">Mật khẩu</label>

                    <div class="col-md-7">
                        <div class="input-group mb-3">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @type = "password", @id = "password" } })
                            <div class="input-group-append hoverpointer" id="showPw">
                                <i class="input-group-text bg-white fa fa-eye rounded-right"></i>
                            </div>
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger small d-block" })
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-3 col-lg-2 col-form-label" for="Signature">Email nhận thư </label>

                    <div class="col-md-7">
                        @Html.EditorFor(model => model.Signature, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Signature, "", new { @class = "text-danger small" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-3 col-lg-2 col-form-label" for="EmailSubject">Link khảo sát</label>

                    <div class="col-md-7">
                        @Html.EditorFor(model => model.EmailSubject, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EmailSubject, "", new { @class = "text-danger small" })
                    </div>
                </div>
                <button class="btn btn-outline-primary btn-sm px-2" type="submit">Cập nhật</button>
            }
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.9.4/tinymce.min.js" integrity="sha256-Fwyk6LiNUJqtLRrUxrvSRfazQeBoAECMgqFEbKRgWdw=" crossorigin="anonymous"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            function showPass() {
                var x = document.getElementById("password");
                if (x.type === "password") {
                    x.type = "text";
                } else {
                    x.type = "password";
                }
            }

            $("#showPw").on("click", showPass);

            tinymce.init({
                selector: 'textarea'
            });
        });
    </script>
}
